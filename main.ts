function 安全運転する () {
    // 危険があるかを調べます。
    // 　・危険があれば、車を停止します。
    // 　・危険がなければ、車を前進します。
    // 安全確認し、危険の あり・なし を 確認します。
    // 安全確認の結果、危険がある
    if (安全確認する() == 危険_あり) {
        // ブレーキを踏んで、クラクションをならします。
        // また、状況を「状況_ブレーキ」にします。
        // 暫くしたら、状況を「状況_走行」に戻します。
        車を停止する()
    } else {
        // 危険がなければ、前進します。
        // もし道から逸れていたら、軌道修正します。
        車を前進する()
    }
}
// 出発前に、車の準備をします。
function 準備する_車 () {
    // アクセルやハンドルの確認を行います。
    準備する_車_エンジン()
    // センサーなどの電子機器を設定します。
    準備する_車_電子機器()
}
// 同乗者から話しかけられた場合のプログラムです。
radio.onReceivedNumber(function (receivedNumber) {
    Kitronik_Move_Motor.stop()
    // 状況を「お店に到着」として、変数にメモします。
    状況 = 状況_到着
    Kitronik_Move_Motor.stop()
    basic.showString("M")
    Kitronik_Move_Motor.stop()
    // お家に連絡します。
    radio.sendNumber(状況)
    Kitronik_Move_Motor.stop()
})
// 数字と音で、準備段階を表現します
function 準備段階を表現する (数値: number) {
    basic.showNumber(数値)
    music.playTone(392, music.beat(BeatFraction.Half))
    basic.pause(1000)
}
function 出発する () {
    状況 = 状況_準備完了
    無線を設定する()
    ブレーキを離す()
}
// 左右別々の速度でモーターを回します。
function モーターを回す (左側: number, 右側: number) {
    // 指定された速度で、左側のモーターを回します。
    Kitronik_Move_Motor.motorOn(Kitronik_Move_Motor.Motors.MotorLeft, Kitronik_Move_Motor.MotorDirection.Forward, 左側)
    // 指定された速度で、右側のモーターを回します。
    Kitronik_Move_Motor.motorOn(Kitronik_Move_Motor.Motors.MotorRight, Kitronik_Move_Motor.MotorDirection.Forward, 右側)
}
input.onButtonPressed(Button.A, function () {
    Kitronik_Move_Motor.stop()
    if (状況 == 状況_準備完了) {
        if (無線グループ番号 > 1) {
            無線グループ番号 += -1
            出発する()
        }
    }
})
// 危険な距離まで迫ったら、「危険_あり」と教えます。
// そうでなければ「危険_なし」と教えます。
function 安全確認する () {
    let 距離_何も見えない = 0
    // 障害物までの距離を調べ、変数にメモします。
    // センサーがとらえた、障害物までの距離
    センサー値_距離 = Kitronik_Move_Motor.measure()
    // 下の3つの場合に分けて、危険があるかどうかを教えます。
    // １．遠すぎて見えない
    // ２．近すぎて危険
    // ３．見えていいるけど、近すぎない
    // 
    // 遠すぎて、何も見えない場合です。
    // 何も見えないくらい遠い場合の距離です。
    // 衝突するほど、危険な距離に迫っている場合です。
    // センサーがとらえた障害物までの距離をメモした変数です。
    // 衝突の危険を感じる距離です。
    if (センサー値_距離 == 距離_何も見えない) {
        // 前方は安全であることを教える。
        return 危険_なし
    } else if (センサー値_距離 < 距離_危険な近さ) {
        // 前方に衝突しそうな障害物があることを教えます。
        return 危険_あり
    } else {
        // 前方は安全であることを教える。
        return 危険_なし
    }
}
function 無線を設定する () {
    radio.setGroup(無線グループ番号)
    music.playTone(523, music.beat(BeatFraction.Whole))
}
// 道路をとらえるセンサーを設定します。
// 建物をとらえるセンサーをせていします。
function 準備する_車_電子機器 () {
    // 道から逸れていない場合の返事を決めます。
    位置_中央 = 0
    // 道の右側に逸れている場合の返事を決めます。
    位置_右寄り = 1
    // 道の右側に逸れている場合の返事を決めます。
    位置_左寄り = 2
    // 道から逸れる場合の、センサー左右が捉えた明暗の差を決める
    感度_道路_差 = 15
    // 距離の単位をｃｍにします。
    Kitronik_Move_Motor.setUltrasonicUnits(Kitronik_Move_Motor.Units.Centimeters)
    // 建物の発見を判断する距離
    距離_道路沿いの建物 = 5
    // 障害物の発見を判断する距離
    距離_危険な近さ = 5
    // 危険がない場合の返事を決めます。
    危険_なし = 0
    // 危険がある場合の返事を決めます。
    危険_あり = 1
    // 危険がある場合の返事を決めます。
    無線グループ数 = 4
    // 危険がある場合の返事を決めます。
    無線グループ番号 = 0
    準備段階を表現する(1)
}
function 急ブレーキを踏む () {
    // モーターを止めます。
    Kitronik_Move_Motor.stop()
    // 驚いた表情をする。
    basic.showIcon(IconNames.Surprised)
}
// 車を停車します。
// クラクションを鳴らします。
// 暫くしたら、再び走り出そうとします。
function 車を停止する () {
    状況 = 状況_停止中
    急ブレーキを踏む()
    // クラクションを鳴らす
    music.playTone(523, music.beat(BeatFraction.Breve))
    ブレーキを離す()
}
// モーターの回転速度を決めます。
function 準備する_車_エンジン () {
    回転_速い = 20
    回転_遅い = 3
    準備段階を表現する(2)
}
input.onButtonPressed(Button.B, function () {
    Kitronik_Move_Motor.stop()
    if (状況 == 状況_準備完了) {
        if (無線グループ番号 < 無線グループ数) {
            無線グループ番号 += 1
            出発する()
        }
    }
})
// 道を逸れたら、左右どちらに寄っていれば、「位置_右」が「位置_右」と教えます。
// 逸れていないければ、「位置_中央」と教えます。
function 車の位置を確認する () {
    // 左センサーの明るさを調べ、変数にメモします。
    センサー値_道路_左 = Kitronik_Move_Motor.readSensor(Kitronik_Move_Motor.LfSensor.Left)
    // 右センサーの明るさを調べ、変数にメモします。
    センサー値_道路_右 = Kitronik_Move_Motor.readSensor(Kitronik_Move_Motor.LfSensor.Right)
    センサー値_道路の差 = Math.abs(センサー値_道路_右 - センサー値_道路_左)
    // センサー左右の明暗の大小によって、道から逸れているかを決めます。
    // センサー左右で、明暗の差が大きい場合
    if (センサー値_道路の差 > 感度_道路_差) {
        // 左右のセンサーの明暗により、どちらに寄っているかを決目ます。
        // センサーの左側が明るく、右側がが暗い場合
        if (センサー値_道路_左 > センサー値_道路_右) {
            // 車体番号によって、左右どちらに寄っているかを教える。
            // ※1号機と2号機では、センサーの位置が左右逆になっているため。
            // 1号機かどうか
            if (無線グループ番号 == 1) {
                // 右側に寄っていないことを教える。
                return 位置_右寄り
            } else {
                // 右側に寄っていないことを教える。
                return 位置_左寄り
            }
        } else {
            // 車体番号によって、左右どちらに寄っているかを教える。
            // ※1号機と2号機では、センサーの位置が左右逆になっているため。
            // 1号機かどうか
            if (無線グループ番号 == 1) {
                // 右側に寄っていないことを教える。
                return 位置_左寄り
            } else {
                // 右側に寄っていないことを教える。
                return 位置_右寄り
            }
        }
    } else {
        // 左右どちらにも寄っていないことを教える。
        return 位置_中央
    }
}
// 暫くしてから運転を再開します。
// 状況を走行中に変えます。
function ブレーキを離す () {
    radio.sendNumber(状況)
    basic.showNumber(無線グループ番号)
    状況 = 状況_走行中
}
function 準備する_運転手 () {
    お店の方向_右側 = 101
    お店の方向_左側 = 102
    状況_準備完了 = 0
    状況_走行中 = 1
    状況_停止中 = 2
    状況_到着 = 3
    準備段階を表現する(0)
}
// 車を前進します。
// 車体が道から逸れていれば、道の中央に戻します。
function 車を前進する () {
    // 道から逸れているか確認し、変数にメモします。
    位置判断 = 車の位置を確認する()
    // 右に寄ってしまったら、左に軌道修正します。
    // 左に寄ってしまったら、右に軌道修正します。
    // 道から逸れていなければ、まっすく進みます。
    // 右寄り、つまり、道路が左側の状態です。
    // 左寄り、つまり、道路が右側の状態です。
    if (位置判断 == 位置_右寄り) {
        // 左が遅く、右が早いので、反時計回りに回転しながら進みます。
        モーターを回す(回転_遅い, 回転_速い)
    } else if (位置判断 == 位置_左寄り) {
        // 左が早く、右が遅いので、時計回りに回転しながら進みます。
        モーターを回す(回転_速い, 回転_遅い)
    } else {
        // 左右どちらも早く回して、まっすぐ進みます。
        モーターを回す(回転_速い, 回転_速い)
    }
}
// 出発前に、一度だけ準備を行います。
let 位置判断 = 0
let お店の方向_左側 = 0
let お店の方向_右側 = 0
let 状況_走行中 = 0
let センサー値_道路の差 = 0
let センサー値_道路_右 = 0
let センサー値_道路_左 = 0
let 回転_遅い = 0
let 回転_速い = 0
let 状況_停止中 = 0
let 無線グループ数 = 0
let 距離_道路沿いの建物 = 0
let 感度_道路_差 = 0
let 位置_左寄り = 0
let 位置_右寄り = 0
let 位置_中央 = 0
let 危険_なし = 0
let 距離_危険な近さ = 0
let センサー値_距離 = 0
let 無線グループ番号 = 0
let 状況_準備完了 = 0
let 状況_到着 = 0
let 状況 = 0
let 危険_あり = 0
// 出発前に、車の準備をします。
準備する_車()
// 出発前に、運転手の準備をします。
準備する_運転手()
// 出発したら、ずっと安全運転します。
basic.forever(function () {
    // 走行中は、安全運転します。
    // 停車している間は、する必要あありません。
    // 変数から、現在の状況を確認します。
    // ・車が走行していたら、安全確認します。
    // ・停車していたら、安全確認しません。
    // 現在の状況をメモする変数です。
    // 状況のうち、車が走っている時を指します。
    if (状況 == 状況_走行中) {
        // 安全運転します。
        安全運転する()
    }
})
